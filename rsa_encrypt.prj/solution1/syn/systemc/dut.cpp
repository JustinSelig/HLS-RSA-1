// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "dut.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic dut::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic dut::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<45> dut::ap_ST_st1_fsm_0 = "1";
const sc_lv<45> dut::ap_ST_st2_fsm_1 = "10";
const sc_lv<45> dut::ap_ST_st3_fsm_2 = "100";
const sc_lv<45> dut::ap_ST_pp0_stg0_fsm_3 = "1000";
const sc_lv<45> dut::ap_ST_pp0_stg1_fsm_4 = "10000";
const sc_lv<45> dut::ap_ST_pp0_stg2_fsm_5 = "100000";
const sc_lv<45> dut::ap_ST_pp0_stg3_fsm_6 = "1000000";
const sc_lv<45> dut::ap_ST_pp0_stg4_fsm_7 = "10000000";
const sc_lv<45> dut::ap_ST_pp0_stg5_fsm_8 = "100000000";
const sc_lv<45> dut::ap_ST_pp0_stg6_fsm_9 = "1000000000";
const sc_lv<45> dut::ap_ST_pp0_stg7_fsm_10 = "10000000000";
const sc_lv<45> dut::ap_ST_pp0_stg8_fsm_11 = "100000000000";
const sc_lv<45> dut::ap_ST_pp0_stg9_fsm_12 = "1000000000000";
const sc_lv<45> dut::ap_ST_pp0_stg10_fsm_13 = "10000000000000";
const sc_lv<45> dut::ap_ST_pp0_stg11_fsm_14 = "100000000000000";
const sc_lv<45> dut::ap_ST_pp0_stg12_fsm_15 = "1000000000000000";
const sc_lv<45> dut::ap_ST_pp0_stg13_fsm_16 = "10000000000000000";
const sc_lv<45> dut::ap_ST_pp0_stg14_fsm_17 = "100000000000000000";
const sc_lv<45> dut::ap_ST_pp0_stg15_fsm_18 = "1000000000000000000";
const sc_lv<45> dut::ap_ST_pp0_stg16_fsm_19 = "10000000000000000000";
const sc_lv<45> dut::ap_ST_pp0_stg17_fsm_20 = "100000000000000000000";
const sc_lv<45> dut::ap_ST_pp0_stg18_fsm_21 = "1000000000000000000000";
const sc_lv<45> dut::ap_ST_pp0_stg19_fsm_22 = "10000000000000000000000";
const sc_lv<45> dut::ap_ST_pp0_stg20_fsm_23 = "100000000000000000000000";
const sc_lv<45> dut::ap_ST_pp0_stg21_fsm_24 = "1000000000000000000000000";
const sc_lv<45> dut::ap_ST_pp0_stg22_fsm_25 = "10000000000000000000000000";
const sc_lv<45> dut::ap_ST_pp0_stg23_fsm_26 = "100000000000000000000000000";
const sc_lv<45> dut::ap_ST_pp0_stg24_fsm_27 = "1000000000000000000000000000";
const sc_lv<45> dut::ap_ST_pp0_stg25_fsm_28 = "10000000000000000000000000000";
const sc_lv<45> dut::ap_ST_pp0_stg26_fsm_29 = "100000000000000000000000000000";
const sc_lv<45> dut::ap_ST_pp0_stg27_fsm_30 = "1000000000000000000000000000000";
const sc_lv<45> dut::ap_ST_pp0_stg28_fsm_31 = "10000000000000000000000000000000";
const sc_lv<45> dut::ap_ST_pp0_stg29_fsm_32 = "100000000000000000000000000000000";
const sc_lv<45> dut::ap_ST_pp0_stg30_fsm_33 = "1000000000000000000000000000000000";
const sc_lv<45> dut::ap_ST_pp0_stg31_fsm_34 = "10000000000000000000000000000000000";
const sc_lv<45> dut::ap_ST_pp0_stg32_fsm_35 = "100000000000000000000000000000000000";
const sc_lv<45> dut::ap_ST_pp0_stg33_fsm_36 = "1000000000000000000000000000000000000";
const sc_lv<45> dut::ap_ST_pp0_stg34_fsm_37 = "10000000000000000000000000000000000000";
const sc_lv<45> dut::ap_ST_pp0_stg35_fsm_38 = "100000000000000000000000000000000000000";
const sc_lv<45> dut::ap_ST_pp0_stg36_fsm_39 = "1000000000000000000000000000000000000000";
const sc_lv<45> dut::ap_ST_pp0_stg37_fsm_40 = "10000000000000000000000000000000000000000";
const sc_lv<45> dut::ap_ST_pp0_stg38_fsm_41 = "100000000000000000000000000000000000000000";
const sc_lv<45> dut::ap_ST_pp0_stg39_fsm_42 = "1000000000000000000000000000000000000000000";
const sc_lv<45> dut::ap_ST_pp0_stg40_fsm_43 = "10000000000000000000000000000000000000000000";
const sc_lv<45> dut::ap_ST_st81_fsm_44 = "100000000000000000000000000000000000000000000";
const sc_lv<32> dut::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> dut::ap_const_lv1_1 = "1";
const sc_lv<32> dut::ap_const_lv32_1 = "1";
const sc_lv<32> dut::ap_const_lv32_2 = "10";
const sc_lv<32> dut::ap_const_lv32_2C = "101100";
const sc_lv<32> dut::ap_const_lv32_3 = "11";
const sc_lv<1> dut::ap_const_lv1_0 = "0";
const sc_lv<32> dut::ap_const_lv32_26 = "100110";
const sc_lv<32> dut::ap_const_lv32_27 = "100111";
const sc_lv<32> dut::ap_const_lv32_2B = "101011";
const sc_lv<32> dut::ap_const_lv32_1F = "11111";

dut::dut(sc_module_name name) : sc_module(name), mVcdFile(0) {
    dut_urem_32ns_32ns_32_36_U1 = new dut_urem_32ns_32ns_32_36<1,36,32,32,32>("dut_urem_32ns_32ns_32_36_U1");
    dut_urem_32ns_32ns_32_36_U1->clk(ap_clk);
    dut_urem_32ns_32ns_32_36_U1->reset(ap_rst);
    dut_urem_32ns_32ns_32_36_U1->din0(x_pn_i_phi_fu_93_p4);
    dut_urem_32ns_32ns_32_36_U1->din1(tmp_V_6_reg_176);
    dut_urem_32ns_32ns_32_36_U1->ce(ap_var_for_const0);
    dut_urem_32ns_32ns_32_36_U1->dout(grp_fu_119_p2);
    dut_mul_32s_32s_32_6_U2 = new dut_mul_32s_32s_32_6<1,6,32,32,32>("dut_mul_32s_32s_32_6_U2");
    dut_mul_32s_32s_32_6_U2->clk(ap_clk);
    dut_mul_32s_32s_32_6_U2->reset(ap_rst);
    dut_mul_32s_32s_32_6_U2->din0(grp_fu_119_p2);
    dut_mul_32s_32s_32_6_U2->din1(grp_fu_119_p2);
    dut_mul_32s_32s_32_6_U2->ce(ap_var_for_const0);
    dut_mul_32s_32s_32_6_U2->dout(grp_fu_138_p2);
    dut_mul_32s_32s_32_6_U3 = new dut_mul_32s_32s_32_6<1,6,32,32,32>("dut_mul_32s_32s_32_6_U3");
    dut_mul_32s_32s_32_6_U3->clk(ap_clk);
    dut_mul_32s_32s_32_6_U3->reset(ap_rst);
    dut_mul_32s_32s_32_6_U3->din0(x_assign_1_reg_195);
    dut_mul_32s_32s_32_6_U3->din1(tmp_V_fu_64);
    dut_mul_32s_32s_32_6_U3->ce(ap_var_for_const0);
    dut_mul_32s_32s_32_6_U3->dout(grp_fu_144_p2);
    dut_urem_32ns_32ns_32_36_U4 = new dut_urem_32ns_32ns_32_36<1,36,32,32,32>("dut_urem_32ns_32ns_32_36_U4");
    dut_urem_32ns_32ns_32_36_U4->clk(ap_clk);
    dut_urem_32ns_32ns_32_36_U4->reset(ap_rst);
    dut_urem_32ns_32ns_32_36_U4->din0(grp_fu_144_p2);
    dut_urem_32ns_32ns_32_36_U4->din1(tmp_V_6_reg_176);
    dut_urem_32ns_32ns_32_36_U4->ce(ap_var_for_const0);
    dut_urem_32ns_32ns_32_36_U4->dout(grp_fu_149_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( strm_out_V_V_full_n );
    sensitive << ( ap_sig_cseq_ST_st81_fsm_44 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( strm_out_V_V_full_n );
    sensitive << ( ap_sig_cseq_ST_st81_fsm_44 );

    SC_METHOD(thread_ap_sig_101);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_111);
    sensitive << ( ap_start );
    sensitive << ( strm_in_V_V_empty_n );

    SC_METHOD(thread_ap_sig_126);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_152);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_163);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_177);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_60);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_84);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_92);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_pp0_stg0_fsm_3);
    sensitive << ( ap_sig_126 );

    SC_METHOD(thread_ap_sig_cseq_ST_pp0_stg35_fsm_38);
    sensitive << ( ap_sig_152 );

    SC_METHOD(thread_ap_sig_cseq_ST_pp0_stg36_fsm_39);
    sensitive << ( ap_sig_163 );

    SC_METHOD(thread_ap_sig_cseq_ST_pp0_stg40_fsm_43);
    sensitive << ( ap_sig_177 );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_60 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_84 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_92 );

    SC_METHOD(thread_ap_sig_cseq_ST_st81_fsm_44);
    sensitive << ( ap_sig_101 );

    SC_METHOD(thread_p_i_phi_fu_84_p4);
    sensitive << ( p_i_reg_81 );
    sensitive << ( tmp_i_reg_182 );
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_3 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( tmp_reg_190 );

    SC_METHOD(thread_strm_in_V_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( strm_in_V_V_empty_n );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_strm_in_V_V_read);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( strm_in_V_V_empty_n );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( ap_sig_111 );

    SC_METHOD(thread_strm_out_V_V_blk_n);
    sensitive << ( strm_out_V_V_full_n );
    sensitive << ( ap_sig_cseq_ST_st81_fsm_44 );

    SC_METHOD(thread_strm_out_V_V_din);
    sensitive << ( strm_out_V_V_full_n );
    sensitive << ( ap_sig_cseq_ST_st81_fsm_44 );
    sensitive << ( tmp_V_fu_64 );

    SC_METHOD(thread_strm_out_V_V_write);
    sensitive << ( strm_out_V_V_full_n );
    sensitive << ( ap_sig_cseq_ST_st81_fsm_44 );

    SC_METHOD(thread_tmp_1_fu_115_p1);
    sensitive << ( p_i_phi_fu_84_p4 );

    SC_METHOD(thread_tmp_fu_134_p1);
    sensitive << ( y_assign_1_fu_124_p4 );

    SC_METHOD(thread_tmp_i_fu_109_p2);
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_3 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( p_i_phi_fu_84_p4 );

    SC_METHOD(thread_x_pn_i_phi_fu_93_p4);
    sensitive << ( x_pn_i_reg_90 );
    sensitive << ( tmp_i_reg_182 );
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_3 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( tmp_6_i_reg_207 );

    SC_METHOD(thread_y_assign_1_fu_124_p4);
    sensitive << ( p_i_phi_fu_84_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( strm_in_V_V_empty_n );
    sensitive << ( strm_out_V_V_full_n );
    sensitive << ( ap_sig_111 );
    sensitive << ( tmp_i_fu_109_p2 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_sig_cseq_ST_pp0_stg35_fsm_38 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000000000000000000000000000000000000000000001";
    ap_reg_ppiten_pp0_it0 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "dut_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, strm_in_V_V_dout, "(port)strm_in_V_V_dout");
    sc_trace(mVcdFile, strm_in_V_V_empty_n, "(port)strm_in_V_V_empty_n");
    sc_trace(mVcdFile, strm_in_V_V_read, "(port)strm_in_V_V_read");
    sc_trace(mVcdFile, strm_out_V_V_din, "(port)strm_out_V_V_din");
    sc_trace(mVcdFile, strm_out_V_V_full_n, "(port)strm_out_V_V_full_n");
    sc_trace(mVcdFile, strm_out_V_V_write, "(port)strm_out_V_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_60, "ap_sig_60");
    sc_trace(mVcdFile, strm_in_V_V_blk_n, "strm_in_V_V_blk_n");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_84, "ap_sig_84");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_92, "ap_sig_92");
    sc_trace(mVcdFile, strm_out_V_V_blk_n, "strm_out_V_V_blk_n");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st81_fsm_44, "ap_sig_cseq_ST_st81_fsm_44");
    sc_trace(mVcdFile, ap_sig_101, "ap_sig_101");
    sc_trace(mVcdFile, p_i_reg_81, "p_i_reg_81");
    sc_trace(mVcdFile, x_pn_i_reg_90, "x_pn_i_reg_90");
    sc_trace(mVcdFile, tmp_V_4_reg_166, "tmp_V_4_reg_166");
    sc_trace(mVcdFile, ap_sig_111, "ap_sig_111");
    sc_trace(mVcdFile, tmp_V_5_reg_171, "tmp_V_5_reg_171");
    sc_trace(mVcdFile, tmp_V_6_reg_176, "tmp_V_6_reg_176");
    sc_trace(mVcdFile, tmp_i_fu_109_p2, "tmp_i_fu_109_p2");
    sc_trace(mVcdFile, tmp_i_reg_182, "tmp_i_reg_182");
    sc_trace(mVcdFile, ap_sig_cseq_ST_pp0_stg0_fsm_3, "ap_sig_cseq_ST_pp0_stg0_fsm_3");
    sc_trace(mVcdFile, ap_sig_126, "ap_sig_126");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it0, "ap_reg_ppiten_pp0_it0");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it1, "ap_reg_ppiten_pp0_it1");
    sc_trace(mVcdFile, tmp_1_fu_115_p1, "tmp_1_fu_115_p1");
    sc_trace(mVcdFile, tmp_1_reg_186, "tmp_1_reg_186");
    sc_trace(mVcdFile, ap_reg_ppstg_tmp_1_reg_186_pp0_iter1, "ap_reg_ppstg_tmp_1_reg_186_pp0_iter1");
    sc_trace(mVcdFile, tmp_fu_134_p1, "tmp_fu_134_p1");
    sc_trace(mVcdFile, tmp_reg_190, "tmp_reg_190");
    sc_trace(mVcdFile, grp_fu_119_p2, "grp_fu_119_p2");
    sc_trace(mVcdFile, x_assign_1_reg_195, "x_assign_1_reg_195");
    sc_trace(mVcdFile, ap_sig_cseq_ST_pp0_stg35_fsm_38, "ap_sig_cseq_ST_pp0_stg35_fsm_38");
    sc_trace(mVcdFile, ap_sig_152, "ap_sig_152");
    sc_trace(mVcdFile, ap_sig_cseq_ST_pp0_stg36_fsm_39, "ap_sig_cseq_ST_pp0_stg36_fsm_39");
    sc_trace(mVcdFile, ap_sig_163, "ap_sig_163");
    sc_trace(mVcdFile, grp_fu_138_p2, "grp_fu_138_p2");
    sc_trace(mVcdFile, tmp_6_i_reg_207, "tmp_6_i_reg_207");
    sc_trace(mVcdFile, ap_sig_cseq_ST_pp0_stg40_fsm_43, "ap_sig_cseq_ST_pp0_stg40_fsm_43");
    sc_trace(mVcdFile, ap_sig_177, "ap_sig_177");
    sc_trace(mVcdFile, grp_fu_144_p2, "grp_fu_144_p2");
    sc_trace(mVcdFile, p_i_phi_fu_84_p4, "p_i_phi_fu_84_p4");
    sc_trace(mVcdFile, x_pn_i_phi_fu_93_p4, "x_pn_i_phi_fu_93_p4");
    sc_trace(mVcdFile, tmp_V_fu_64, "tmp_V_fu_64");
    sc_trace(mVcdFile, grp_fu_149_p2, "grp_fu_149_p2");
    sc_trace(mVcdFile, y_assign_1_fu_124_p4, "y_assign_1_fu_124_p4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("dut.hdltvin.dat");
    mHdltvoutHandle.open("dut.hdltvout.dat");
}

dut::~dut() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete dut_urem_32ns_32ns_32_36_U1;
    delete dut_mul_32s_32s_32_6_U2;
    delete dut_mul_32s_32s_32_6_U3;
    delete dut_urem_32ns_32ns_32_36_U4;
}

void dut::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void dut::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_3.read()) && 
             !esl_seteq<1,1,1>(tmp_i_fu_109_p2.read(), ap_const_lv1_0))) {
            ap_reg_ppiten_pp0_it0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
                    !esl_seteq<1,1,1>(strm_in_V_V_empty_n.read(), ap_const_logic_0))) {
            ap_reg_ppiten_pp0_it0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(tmp_i_reg_182.read(), ap_const_lv1_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg40_fsm_43.read()))) {
            ap_reg_ppiten_pp0_it1 = ap_const_logic_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
                     !esl_seteq<1,1,1>(strm_in_V_V_empty_n.read(), ap_const_logic_0)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg40_fsm_43.read()) && 
                     !esl_seteq<1,1,1>(tmp_i_reg_182.read(), ap_const_lv1_0)))) {
            ap_reg_ppiten_pp0_it1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
         esl_seteq<1,1,1>(tmp_i_reg_182.read(), ap_const_lv1_0))) {
        p_i_reg_81 = tmp_reg_190.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
                !esl_seteq<1,1,1>(strm_in_V_V_empty_n.read(), ap_const_logic_0))) {
        p_i_reg_81 = tmp_V_5_reg_171.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg35_fsm_38.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_tmp_1_reg_186_pp0_iter1.read()))) {
        tmp_V_fu_64 = grp_fu_149_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !ap_sig_111.read())) {
        tmp_V_fu_64 = ap_const_lv32_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
         esl_seteq<1,1,1>(tmp_i_reg_182.read(), ap_const_lv1_0))) {
        x_pn_i_reg_90 = tmp_6_i_reg_207.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
                !esl_seteq<1,1,1>(strm_in_V_V_empty_n.read(), ap_const_logic_0))) {
        x_pn_i_reg_90 = tmp_V_4_reg_166.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_3.read())) {
        ap_reg_ppstg_tmp_1_reg_186_pp0_iter1 = tmp_1_reg_186.read();
        tmp_i_reg_182 = tmp_i_fu_109_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_3.read()) && esl_seteq<1,1,1>(tmp_i_fu_109_p2.read(), ap_const_lv1_0))) {
        tmp_1_reg_186 = tmp_1_fu_115_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && esl_seteq<1,1,1>(tmp_i_reg_182.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg40_fsm_43.read()))) {
        tmp_6_i_reg_207 = grp_fu_138_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && !ap_sig_111.read())) {
        tmp_V_4_reg_166 = strm_in_V_V_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && !esl_seteq<1,1,1>(strm_in_V_V_empty_n.read(), ap_const_logic_0))) {
        tmp_V_5_reg_171 = strm_in_V_V_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && !esl_seteq<1,1,1>(strm_in_V_V_empty_n.read(), ap_const_logic_0))) {
        tmp_V_6_reg_176 = strm_in_V_V_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_3.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && esl_seteq<1,1,1>(tmp_i_fu_109_p2.read(), ap_const_lv1_0))) {
        tmp_reg_190 = tmp_fu_134_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg35_fsm_38.read()) && esl_seteq<1,1,1>(tmp_i_reg_182.read(), ap_const_lv1_0))) {
        x_assign_1_reg_195 = grp_fu_119_p2.read();
    }
}

void dut::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st81_fsm_44.read()) && 
         !esl_seteq<1,1,1>(strm_out_V_V_full_n.read(), ap_const_logic_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void dut::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void dut::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st81_fsm_44.read()) && 
         !esl_seteq<1,1,1>(strm_out_V_V_full_n.read(), ap_const_logic_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void dut::thread_ap_sig_101() {
    ap_sig_101 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(44, 44));
}

void dut::thread_ap_sig_111() {
    ap_sig_111 = (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(strm_in_V_V_empty_n.read(), ap_const_logic_0));
}

void dut::thread_ap_sig_126() {
    ap_sig_126 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(3, 3));
}

void dut::thread_ap_sig_152() {
    ap_sig_152 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(38, 38));
}

void dut::thread_ap_sig_163() {
    ap_sig_163 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(39, 39));
}

void dut::thread_ap_sig_177() {
    ap_sig_177 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(43, 43));
}

void dut::thread_ap_sig_60() {
    ap_sig_60 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void dut::thread_ap_sig_84() {
    ap_sig_84 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void dut::thread_ap_sig_92() {
    ap_sig_92 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void dut::thread_ap_sig_cseq_ST_pp0_stg0_fsm_3() {
    if (ap_sig_126.read()) {
        ap_sig_cseq_ST_pp0_stg0_fsm_3 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_pp0_stg0_fsm_3 = ap_const_logic_0;
    }
}

void dut::thread_ap_sig_cseq_ST_pp0_stg35_fsm_38() {
    if (ap_sig_152.read()) {
        ap_sig_cseq_ST_pp0_stg35_fsm_38 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_pp0_stg35_fsm_38 = ap_const_logic_0;
    }
}

void dut::thread_ap_sig_cseq_ST_pp0_stg36_fsm_39() {
    if (ap_sig_163.read()) {
        ap_sig_cseq_ST_pp0_stg36_fsm_39 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_pp0_stg36_fsm_39 = ap_const_logic_0;
    }
}

void dut::thread_ap_sig_cseq_ST_pp0_stg40_fsm_43() {
    if (ap_sig_177.read()) {
        ap_sig_cseq_ST_pp0_stg40_fsm_43 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_pp0_stg40_fsm_43 = ap_const_logic_0;
    }
}

void dut::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_60.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void dut::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_84.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void dut::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_92.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void dut::thread_ap_sig_cseq_ST_st81_fsm_44() {
    if (ap_sig_101.read()) {
        ap_sig_cseq_ST_st81_fsm_44 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st81_fsm_44 = ap_const_logic_0;
    }
}

void dut::thread_p_i_phi_fu_84_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
         esl_seteq<1,1,1>(tmp_i_reg_182.read(), ap_const_lv1_0))) {
        p_i_phi_fu_84_p4 = tmp_reg_190.read();
    } else {
        p_i_phi_fu_84_p4 = p_i_reg_81.read();
    }
}

void dut::thread_strm_in_V_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()))) {
        strm_in_V_V_blk_n = strm_in_V_V_empty_n.read();
    } else {
        strm_in_V_V_blk_n = ap_const_logic_1;
    }
}

void dut::thread_strm_in_V_V_read() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
          !ap_sig_111.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
          !esl_seteq<1,1,1>(strm_in_V_V_empty_n.read(), ap_const_logic_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
          !esl_seteq<1,1,1>(strm_in_V_V_empty_n.read(), ap_const_logic_0)))) {
        strm_in_V_V_read = ap_const_logic_1;
    } else {
        strm_in_V_V_read = ap_const_logic_0;
    }
}

void dut::thread_strm_out_V_V_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st81_fsm_44.read())) {
        strm_out_V_V_blk_n = strm_out_V_V_full_n.read();
    } else {
        strm_out_V_V_blk_n = ap_const_logic_1;
    }
}

void dut::thread_strm_out_V_V_din() {
    strm_out_V_V_din = tmp_V_fu_64.read();
}

void dut::thread_strm_out_V_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st81_fsm_44.read()) && 
         !esl_seteq<1,1,1>(strm_out_V_V_full_n.read(), ap_const_logic_0))) {
        strm_out_V_V_write = ap_const_logic_1;
    } else {
        strm_out_V_V_write = ap_const_logic_0;
    }
}

void dut::thread_tmp_1_fu_115_p1() {
    tmp_1_fu_115_p1 = p_i_phi_fu_84_p4.read().range(1-1, 0);
}

void dut::thread_tmp_fu_134_p1() {
    tmp_fu_134_p1 = esl_zext<32,31>(y_assign_1_fu_124_p4.read());
}

void dut::thread_tmp_i_fu_109_p2() {
    tmp_i_fu_109_p2 = (!p_i_phi_fu_84_p4.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(p_i_phi_fu_84_p4.read() == ap_const_lv32_0);
}

void dut::thread_x_pn_i_phi_fu_93_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
         esl_seteq<1,1,1>(tmp_i_reg_182.read(), ap_const_lv1_0))) {
        x_pn_i_phi_fu_93_p4 = tmp_6_i_reg_207.read();
    } else {
        x_pn_i_phi_fu_93_p4 = x_pn_i_reg_90.read();
    }
}

void dut::thread_y_assign_1_fu_124_p4() {
    y_assign_1_fu_124_p4 = p_i_phi_fu_84_p4.read().range(31, 1);
}

void dut::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!ap_sig_111.read()) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(strm_in_V_V_empty_n.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            } else {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            }
            break;
        case 4 : 
            if (!esl_seteq<1,1,1>(strm_in_V_V_empty_n.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_3;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 8 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && !esl_seteq<1,1,1>(tmp_i_fu_109_p2.read(), ap_const_lv1_0) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()))) {
                ap_NS_fsm = ap_ST_pp0_stg1_fsm_4;
            } else {
                ap_NS_fsm = ap_ST_st81_fsm_44;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_pp0_stg2_fsm_5;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_pp0_stg3_fsm_6;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_pp0_stg4_fsm_7;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_pp0_stg5_fsm_8;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_pp0_stg6_fsm_9;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_pp0_stg7_fsm_10;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_pp0_stg8_fsm_11;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_pp0_stg9_fsm_12;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_pp0_stg10_fsm_13;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_pp0_stg11_fsm_14;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_pp0_stg12_fsm_15;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_pp0_stg13_fsm_16;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_pp0_stg14_fsm_17;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_pp0_stg15_fsm_18;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_pp0_stg16_fsm_19;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_pp0_stg17_fsm_20;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_pp0_stg18_fsm_21;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_pp0_stg19_fsm_22;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_pp0_stg20_fsm_23;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_pp0_stg21_fsm_24;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_pp0_stg22_fsm_25;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_pp0_stg23_fsm_26;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_pp0_stg24_fsm_27;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_pp0_stg25_fsm_28;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_pp0_stg26_fsm_29;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_pp0_stg27_fsm_30;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_pp0_stg28_fsm_31;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_pp0_stg29_fsm_32;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_pp0_stg30_fsm_33;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_pp0_stg31_fsm_34;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_pp0_stg32_fsm_35;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_pp0_stg33_fsm_36;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_pp0_stg34_fsm_37;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_pp0_stg35_fsm_38;
            break;
        case 274877906944 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg35_fsm_38.read()) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()))) {
                ap_NS_fsm = ap_ST_pp0_stg36_fsm_39;
            } else {
                ap_NS_fsm = ap_ST_st81_fsm_44;
            }
            break;
        case 549755813888 : 
            ap_NS_fsm = ap_ST_pp0_stg37_fsm_40;
            break;
        case 1099511627776 : 
            ap_NS_fsm = ap_ST_pp0_stg38_fsm_41;
            break;
        case 2199023255552 : 
            ap_NS_fsm = ap_ST_pp0_stg39_fsm_42;
            break;
        case 4398046511104 : 
            ap_NS_fsm = ap_ST_pp0_stg40_fsm_43;
            break;
        case 8796093022208 : 
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_3;
            break;
        case 17592186044416 : 
            if (!esl_seteq<1,1,1>(strm_out_V_V_full_n.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st81_fsm_44;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            break;
    }
}

void dut::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"strm_in_V_V_dout\" :  \"" << strm_in_V_V_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"strm_in_V_V_empty_n\" :  \"" << strm_in_V_V_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"strm_in_V_V_read\" :  \"" << strm_in_V_V_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"strm_out_V_V_din\" :  \"" << strm_out_V_V_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"strm_out_V_V_full_n\" :  \"" << strm_out_V_V_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"strm_out_V_V_write\" :  \"" << strm_out_V_V_write.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

