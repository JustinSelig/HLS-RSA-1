-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    strm_in_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    strm_in_V_V_empty_n : IN STD_LOGIC;
    strm_in_V_V_read : OUT STD_LOGIC;
    strm_out_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    strm_out_V_V_full_n : IN STD_LOGIC;
    strm_out_V_V_write : OUT STD_LOGIC );
end;


architecture behav of dut is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dut,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.702000,HLS_SYN_LAT=695,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=8,HLS_SYN_FF=4337,HLS_SYN_LUT=4252}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000100";
    constant ap_ST_pp0_stg0_fsm_3 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000001000";
    constant ap_ST_pp0_stg1_fsm_4 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000010000";
    constant ap_ST_pp0_stg2_fsm_5 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000100000";
    constant ap_ST_pp0_stg3_fsm_6 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000001000000";
    constant ap_ST_pp0_stg4_fsm_7 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000010000000";
    constant ap_ST_pp0_stg5_fsm_8 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000100000000";
    constant ap_ST_pp0_stg6_fsm_9 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000001000000000";
    constant ap_ST_pp0_stg7_fsm_10 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000010000000000";
    constant ap_ST_pp0_stg8_fsm_11 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000100000000000";
    constant ap_ST_pp0_stg9_fsm_12 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000001000000000000";
    constant ap_ST_pp0_stg10_fsm_13 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000010000000000000";
    constant ap_ST_pp0_stg11_fsm_14 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000100000000000000";
    constant ap_ST_pp0_stg12_fsm_15 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000001000000000000000";
    constant ap_ST_pp0_stg13_fsm_16 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000010000000000000000";
    constant ap_ST_pp0_stg14_fsm_17 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000100000000000000000";
    constant ap_ST_pp0_stg15_fsm_18 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000001000000000000000000";
    constant ap_ST_pp0_stg16_fsm_19 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000010000000000000000000";
    constant ap_ST_pp0_stg17_fsm_20 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000100000000000000000000";
    constant ap_ST_pp0_stg18_fsm_21 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000001000000000000000000000";
    constant ap_ST_pp0_stg19_fsm_22 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000010000000000000000000000";
    constant ap_ST_pp0_stg20_fsm_23 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000100000000000000000000000";
    constant ap_ST_pp0_stg21_fsm_24 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000001000000000000000000000000";
    constant ap_ST_pp0_stg22_fsm_25 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000010000000000000000000000000";
    constant ap_ST_pp0_stg23_fsm_26 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000100000000000000000000000000";
    constant ap_ST_pp0_stg24_fsm_27 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000001000000000000000000000000000";
    constant ap_ST_pp0_stg25_fsm_28 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000010000000000000000000000000000";
    constant ap_ST_pp0_stg26_fsm_29 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000100000000000000000000000000000";
    constant ap_ST_pp0_stg27_fsm_30 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000001000000000000000000000000000000";
    constant ap_ST_pp0_stg28_fsm_31 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000010000000000000000000000000000000";
    constant ap_ST_pp0_stg29_fsm_32 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000100000000000000000000000000000000";
    constant ap_ST_pp0_stg30_fsm_33 : STD_LOGIC_VECTOR (44 downto 0) := "000000000001000000000000000000000000000000000";
    constant ap_ST_pp0_stg31_fsm_34 : STD_LOGIC_VECTOR (44 downto 0) := "000000000010000000000000000000000000000000000";
    constant ap_ST_pp0_stg32_fsm_35 : STD_LOGIC_VECTOR (44 downto 0) := "000000000100000000000000000000000000000000000";
    constant ap_ST_pp0_stg33_fsm_36 : STD_LOGIC_VECTOR (44 downto 0) := "000000001000000000000000000000000000000000000";
    constant ap_ST_pp0_stg34_fsm_37 : STD_LOGIC_VECTOR (44 downto 0) := "000000010000000000000000000000000000000000000";
    constant ap_ST_pp0_stg35_fsm_38 : STD_LOGIC_VECTOR (44 downto 0) := "000000100000000000000000000000000000000000000";
    constant ap_ST_pp0_stg36_fsm_39 : STD_LOGIC_VECTOR (44 downto 0) := "000001000000000000000000000000000000000000000";
    constant ap_ST_pp0_stg37_fsm_40 : STD_LOGIC_VECTOR (44 downto 0) := "000010000000000000000000000000000000000000000";
    constant ap_ST_pp0_stg38_fsm_41 : STD_LOGIC_VECTOR (44 downto 0) := "000100000000000000000000000000000000000000000";
    constant ap_ST_pp0_stg39_fsm_42 : STD_LOGIC_VECTOR (44 downto 0) := "001000000000000000000000000000000000000000000";
    constant ap_ST_pp0_stg40_fsm_43 : STD_LOGIC_VECTOR (44 downto 0) := "010000000000000000000000000000000000000000000";
    constant ap_ST_st81_fsm_44 : STD_LOGIC_VECTOR (44 downto 0) := "100000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_60 : BOOLEAN;
    signal strm_in_V_V_blk_n : STD_LOGIC;
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_84 : BOOLEAN;
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_92 : BOOLEAN;
    signal strm_out_V_V_blk_n : STD_LOGIC;
    signal ap_sig_cseq_ST_st81_fsm_44 : STD_LOGIC;
    signal ap_sig_101 : BOOLEAN;
    signal p_i_reg_81 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_pn_i_reg_90 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_4_reg_166 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_111 : BOOLEAN;
    signal tmp_V_5_reg_171 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_6_reg_176 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_fu_109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_reg_182 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_3 : STD_LOGIC;
    signal ap_sig_126 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal tmp_1_fu_115_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_186 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_1_reg_186_pp0_iter1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_134_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_190 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_119_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_1_reg_195 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg35_fsm_38 : STD_LOGIC;
    signal ap_sig_152 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg36_fsm_39 : STD_LOGIC;
    signal ap_sig_163 : BOOLEAN;
    signal grp_fu_138_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_i_reg_207 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg40_fsm_43 : STD_LOGIC;
    signal ap_sig_177 : BOOLEAN;
    signal grp_fu_144_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_i_phi_fu_84_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_pn_i_phi_fu_93_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_fu_64 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_149_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_assign_1_fu_124_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (44 downto 0);

    component dut_urem_32ns_32ns_32_36 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_mul_32s_32s_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    dut_urem_32ns_32ns_32_36_U1 : component dut_urem_32ns_32ns_32_36
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => x_pn_i_phi_fu_93_p4,
        din1 => tmp_V_6_reg_176,
        ce => ap_const_logic_1,
        dout => grp_fu_119_p2);

    dut_mul_32s_32s_32_6_U2 : component dut_mul_32s_32s_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_119_p2,
        din1 => grp_fu_119_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_138_p2);

    dut_mul_32s_32s_32_6_U3 : component dut_mul_32s_32s_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => x_assign_1_reg_195,
        din1 => tmp_V_fu_64,
        ce => ap_const_logic_1,
        dout => grp_fu_144_p2);

    dut_urem_32ns_32ns_32_36_U4 : component dut_urem_32ns_32ns_32_36
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_144_p2,
        din1 => tmp_V_6_reg_176,
        ce => ap_const_logic_1,
        dout => grp_fu_149_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and not((tmp_i_fu_109_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((strm_in_V_V_empty_n = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((tmp_i_reg_182 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg40_fsm_43))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((strm_in_V_V_empty_n = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg40_fsm_43) and not((tmp_i_reg_182 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    p_i_reg_81_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (tmp_i_reg_182 = ap_const_lv1_0))) then 
                p_i_reg_81 <= tmp_reg_190;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((strm_in_V_V_empty_n = ap_const_logic_0)))) then 
                p_i_reg_81 <= tmp_V_5_reg_171;
            end if; 
        end if;
    end process;

    tmp_V_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg35_fsm_38) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_1_reg_186_pp0_iter1)))) then 
                tmp_V_fu_64 <= grp_fu_149_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_111))) then 
                tmp_V_fu_64 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    x_pn_i_reg_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (tmp_i_reg_182 = ap_const_lv1_0))) then 
                x_pn_i_reg_90 <= tmp_6_i_reg_207;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((strm_in_V_V_empty_n = ap_const_logic_0)))) then 
                x_pn_i_reg_90 <= tmp_V_4_reg_166;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3)) then
                ap_reg_ppstg_tmp_1_reg_186_pp0_iter1 <= tmp_1_reg_186;
                tmp_i_reg_182 <= tmp_i_fu_109_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (tmp_i_fu_109_p2 = ap_const_lv1_0))) then
                tmp_1_reg_186 <= tmp_1_fu_115_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (tmp_i_reg_182 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg40_fsm_43))) then
                tmp_6_i_reg_207 <= grp_fu_138_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_111))) then
                tmp_V_4_reg_166 <= strm_in_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((strm_in_V_V_empty_n = ap_const_logic_0)))) then
                tmp_V_5_reg_171 <= strm_in_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((strm_in_V_V_empty_n = ap_const_logic_0)))) then
                tmp_V_6_reg_176 <= strm_in_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (tmp_i_fu_109_p2 = ap_const_lv1_0))) then
                    tmp_reg_190(30 downto 0) <= tmp_fu_134_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg35_fsm_38) and (tmp_i_reg_182 = ap_const_lv1_0))) then
                x_assign_1_reg_195 <= grp_fu_119_p2;
            end if;
        end if;
    end process;
    tmp_reg_190(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, strm_in_V_V_empty_n, strm_out_V_V_full_n, ap_sig_111, tmp_i_fu_109_p2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg35_fsm_38)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_111)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((strm_in_V_V_empty_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((strm_in_V_V_empty_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_pp0_stg0_fsm_3 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((tmp_i_fu_109_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st81_fsm_44;
                end if;
            when ap_ST_pp0_stg1_fsm_4 => 
                ap_NS_fsm <= ap_ST_pp0_stg2_fsm_5;
            when ap_ST_pp0_stg2_fsm_5 => 
                ap_NS_fsm <= ap_ST_pp0_stg3_fsm_6;
            when ap_ST_pp0_stg3_fsm_6 => 
                ap_NS_fsm <= ap_ST_pp0_stg4_fsm_7;
            when ap_ST_pp0_stg4_fsm_7 => 
                ap_NS_fsm <= ap_ST_pp0_stg5_fsm_8;
            when ap_ST_pp0_stg5_fsm_8 => 
                ap_NS_fsm <= ap_ST_pp0_stg6_fsm_9;
            when ap_ST_pp0_stg6_fsm_9 => 
                ap_NS_fsm <= ap_ST_pp0_stg7_fsm_10;
            when ap_ST_pp0_stg7_fsm_10 => 
                ap_NS_fsm <= ap_ST_pp0_stg8_fsm_11;
            when ap_ST_pp0_stg8_fsm_11 => 
                ap_NS_fsm <= ap_ST_pp0_stg9_fsm_12;
            when ap_ST_pp0_stg9_fsm_12 => 
                ap_NS_fsm <= ap_ST_pp0_stg10_fsm_13;
            when ap_ST_pp0_stg10_fsm_13 => 
                ap_NS_fsm <= ap_ST_pp0_stg11_fsm_14;
            when ap_ST_pp0_stg11_fsm_14 => 
                ap_NS_fsm <= ap_ST_pp0_stg12_fsm_15;
            when ap_ST_pp0_stg12_fsm_15 => 
                ap_NS_fsm <= ap_ST_pp0_stg13_fsm_16;
            when ap_ST_pp0_stg13_fsm_16 => 
                ap_NS_fsm <= ap_ST_pp0_stg14_fsm_17;
            when ap_ST_pp0_stg14_fsm_17 => 
                ap_NS_fsm <= ap_ST_pp0_stg15_fsm_18;
            when ap_ST_pp0_stg15_fsm_18 => 
                ap_NS_fsm <= ap_ST_pp0_stg16_fsm_19;
            when ap_ST_pp0_stg16_fsm_19 => 
                ap_NS_fsm <= ap_ST_pp0_stg17_fsm_20;
            when ap_ST_pp0_stg17_fsm_20 => 
                ap_NS_fsm <= ap_ST_pp0_stg18_fsm_21;
            when ap_ST_pp0_stg18_fsm_21 => 
                ap_NS_fsm <= ap_ST_pp0_stg19_fsm_22;
            when ap_ST_pp0_stg19_fsm_22 => 
                ap_NS_fsm <= ap_ST_pp0_stg20_fsm_23;
            when ap_ST_pp0_stg20_fsm_23 => 
                ap_NS_fsm <= ap_ST_pp0_stg21_fsm_24;
            when ap_ST_pp0_stg21_fsm_24 => 
                ap_NS_fsm <= ap_ST_pp0_stg22_fsm_25;
            when ap_ST_pp0_stg22_fsm_25 => 
                ap_NS_fsm <= ap_ST_pp0_stg23_fsm_26;
            when ap_ST_pp0_stg23_fsm_26 => 
                ap_NS_fsm <= ap_ST_pp0_stg24_fsm_27;
            when ap_ST_pp0_stg24_fsm_27 => 
                ap_NS_fsm <= ap_ST_pp0_stg25_fsm_28;
            when ap_ST_pp0_stg25_fsm_28 => 
                ap_NS_fsm <= ap_ST_pp0_stg26_fsm_29;
            when ap_ST_pp0_stg26_fsm_29 => 
                ap_NS_fsm <= ap_ST_pp0_stg27_fsm_30;
            when ap_ST_pp0_stg27_fsm_30 => 
                ap_NS_fsm <= ap_ST_pp0_stg28_fsm_31;
            when ap_ST_pp0_stg28_fsm_31 => 
                ap_NS_fsm <= ap_ST_pp0_stg29_fsm_32;
            when ap_ST_pp0_stg29_fsm_32 => 
                ap_NS_fsm <= ap_ST_pp0_stg30_fsm_33;
            when ap_ST_pp0_stg30_fsm_33 => 
                ap_NS_fsm <= ap_ST_pp0_stg31_fsm_34;
            when ap_ST_pp0_stg31_fsm_34 => 
                ap_NS_fsm <= ap_ST_pp0_stg32_fsm_35;
            when ap_ST_pp0_stg32_fsm_35 => 
                ap_NS_fsm <= ap_ST_pp0_stg33_fsm_36;
            when ap_ST_pp0_stg33_fsm_36 => 
                ap_NS_fsm <= ap_ST_pp0_stg34_fsm_37;
            when ap_ST_pp0_stg34_fsm_37 => 
                ap_NS_fsm <= ap_ST_pp0_stg35_fsm_38;
            when ap_ST_pp0_stg35_fsm_38 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg35_fsm_38) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg36_fsm_39;
                else
                    ap_NS_fsm <= ap_ST_st81_fsm_44;
                end if;
            when ap_ST_pp0_stg36_fsm_39 => 
                ap_NS_fsm <= ap_ST_pp0_stg37_fsm_40;
            when ap_ST_pp0_stg37_fsm_40 => 
                ap_NS_fsm <= ap_ST_pp0_stg38_fsm_41;
            when ap_ST_pp0_stg38_fsm_41 => 
                ap_NS_fsm <= ap_ST_pp0_stg39_fsm_42;
            when ap_ST_pp0_stg39_fsm_42 => 
                ap_NS_fsm <= ap_ST_pp0_stg40_fsm_43;
            when ap_ST_pp0_stg40_fsm_43 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_3;
            when ap_ST_st81_fsm_44 => 
                if (not((strm_out_V_V_full_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st81_fsm_44;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(strm_out_V_V_full_n, ap_sig_cseq_ST_st81_fsm_44)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st81_fsm_44) and not((strm_out_V_V_full_n = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(strm_out_V_V_full_n, ap_sig_cseq_ST_st81_fsm_44)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st81_fsm_44) and not((strm_out_V_V_full_n = ap_const_logic_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_101_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_101 <= (ap_const_lv1_1 = ap_CS_fsm(44 downto 44));
    end process;


    ap_sig_111_assign_proc : process(ap_start, strm_in_V_V_empty_n)
    begin
                ap_sig_111 <= ((ap_start = ap_const_logic_0) or (strm_in_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_sig_126_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_126 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_152_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_152 <= (ap_const_lv1_1 = ap_CS_fsm(38 downto 38));
    end process;


    ap_sig_163_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_163 <= (ap_const_lv1_1 = ap_CS_fsm(39 downto 39));
    end process;


    ap_sig_177_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_177 <= (ap_const_lv1_1 = ap_CS_fsm(43 downto 43));
    end process;


    ap_sig_60_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_60 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_84_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_84 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_92_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_92 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_cseq_ST_pp0_stg0_fsm_3_assign_proc : process(ap_sig_126)
    begin
        if (ap_sig_126) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_pp0_stg35_fsm_38_assign_proc : process(ap_sig_152)
    begin
        if (ap_sig_152) then 
            ap_sig_cseq_ST_pp0_stg35_fsm_38 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg35_fsm_38 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_pp0_stg36_fsm_39_assign_proc : process(ap_sig_163)
    begin
        if (ap_sig_163) then 
            ap_sig_cseq_ST_pp0_stg36_fsm_39 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg36_fsm_39 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_pp0_stg40_fsm_43_assign_proc : process(ap_sig_177)
    begin
        if (ap_sig_177) then 
            ap_sig_cseq_ST_pp0_stg40_fsm_43 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg40_fsm_43 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_60)
    begin
        if (ap_sig_60) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_84)
    begin
        if (ap_sig_84) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_92)
    begin
        if (ap_sig_92) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st81_fsm_44_assign_proc : process(ap_sig_101)
    begin
        if (ap_sig_101) then 
            ap_sig_cseq_ST_st81_fsm_44 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st81_fsm_44 <= ap_const_logic_0;
        end if; 
    end process;


    p_i_phi_fu_84_p4_assign_proc : process(p_i_reg_81, tmp_i_reg_182, ap_sig_cseq_ST_pp0_stg0_fsm_3, ap_reg_ppiten_pp0_it1, tmp_reg_190)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (tmp_i_reg_182 = ap_const_lv1_0))) then 
            p_i_phi_fu_84_p4 <= tmp_reg_190;
        else 
            p_i_phi_fu_84_p4 <= p_i_reg_81;
        end if; 
    end process;


    strm_in_V_V_blk_n_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, strm_in_V_V_empty_n, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2))) then 
            strm_in_V_V_blk_n <= strm_in_V_V_empty_n;
        else 
            strm_in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    strm_in_V_V_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, strm_in_V_V_empty_n, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_111)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_111)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((strm_in_V_V_empty_n = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((strm_in_V_V_empty_n = ap_const_logic_0))))) then 
            strm_in_V_V_read <= ap_const_logic_1;
        else 
            strm_in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    strm_out_V_V_blk_n_assign_proc : process(strm_out_V_V_full_n, ap_sig_cseq_ST_st81_fsm_44)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st81_fsm_44)) then 
            strm_out_V_V_blk_n <= strm_out_V_V_full_n;
        else 
            strm_out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    strm_out_V_V_din <= tmp_V_fu_64;

    strm_out_V_V_write_assign_proc : process(strm_out_V_V_full_n, ap_sig_cseq_ST_st81_fsm_44)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st81_fsm_44) and not((strm_out_V_V_full_n = ap_const_logic_0)))) then 
            strm_out_V_V_write <= ap_const_logic_1;
        else 
            strm_out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_115_p1 <= p_i_phi_fu_84_p4(1 - 1 downto 0);
    tmp_fu_134_p1 <= std_logic_vector(resize(unsigned(y_assign_1_fu_124_p4),32));
    tmp_i_fu_109_p2 <= "1" when (p_i_phi_fu_84_p4 = ap_const_lv32_0) else "0";

    x_pn_i_phi_fu_93_p4_assign_proc : process(x_pn_i_reg_90, tmp_i_reg_182, ap_sig_cseq_ST_pp0_stg0_fsm_3, ap_reg_ppiten_pp0_it1, tmp_6_i_reg_207)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (tmp_i_reg_182 = ap_const_lv1_0))) then 
            x_pn_i_phi_fu_93_p4 <= tmp_6_i_reg_207;
        else 
            x_pn_i_phi_fu_93_p4 <= x_pn_i_reg_90;
        end if; 
    end process;

    y_assign_1_fu_124_p4 <= p_i_phi_fu_84_p4(31 downto 1);
end behav;
